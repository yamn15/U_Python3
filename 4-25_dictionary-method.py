print('**********************************************************************')
d = {'x': 10, 'y': 20}
print(d)

# help関数
# print(help(d))

print('**********************************************************************')

# keyのみ取り出す場合のメソッド(リストに入ってKeyが返ってくる)
print(d.keys())

# Valueのみ取り出す場合のメソッド(リストに入ってValueが返ってくる)
print(d.values())

print('**********************************************************************')

# dictを他のdictでアップデートしたい場合
## xを上書き、jを追加したい
### 旧dictを新dictで上書きするメソッド

d2 = {'x': 1000, 'j': 500}

print(d)
print(d2)

d.update(d2)
print(d)

print('**********************************************************************')

# dictの中身を取り出すメソッド
print(d.get('x'))

# メソッドを使用しない方法で存在しないkeyを指定すると、対応するkey / バリューはないというエラーが返ってくる
# d['z']

# メソッドを使用して存在しないキーを取り出そうとすると、noneという結果になる
print(d.get('z'))

r = d.get('z')
print(r)
print(type(r))

print('**********************************************************************')

print(d)

# dictの中身を取り出したい場合は、x.popを使用する
## xのバリューがdictから取り出されて出力される
print(d.pop('x'))

### x.popの後にdictを出力すると、xのkey/valueがなくなっている
print(d)

# delでkeyを指定すると、dictからkey/valueを削除できる
del d['y']
print(d)

## 変数自体を削除することも可能。定義自体の削除が可能なので要注意
# del d
# print(d)

### dictの中身を消したい場合はx.clear()を使用する
d.clear()
print(d)

print('**********************************************************************')

# dictの中にkeyがあるかどうかを調べる場合は、 key in xを使用する（True or Falseで出力）
d = {'a': 100, 'b': 200}
print('a' in d)
print('j' in d)
