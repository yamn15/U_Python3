print('******************************************************************')

i = [1, 2, 3, 4, 5]
j = i
print('j =', j)
print('i =', i)

print('******************************************************************')

# この構成でjに100を入れてしまうとiにも100が入ってしまう
##「値渡し」と「参照渡し」の違いが原因
### jはiのアドレス情報を引っ張ってきているため、jの値に連動して、iの値も変わってしまう
i = [1, 2, 3, 4, 5]
j = i
j[0] = 100
print('j =', j)
print('i =', i)

print('******************************************************************')

# 連動して値が変わってしまうのを防ぐためには、
## x.copyメソッドを使用する。もしくはxの全体を指定する.
### ただし、明示的にcopyメソッドを使用したほうが、ほかのプログラマーが確認した際にわかりやすい。
x = [1, 2, 3, 4, 5,]
# y = x.copy()
y = x[:]
y[0] = 100
print('y =', y)
print('x =', x)

## 動画2:40~4:30あたりで、値渡しと参照渡しの説明あり
### 一般的に数字の代入が、値渡しとなり、リストやディクショナリーの代入が参照渡しになる
#### 参照渡し = リストを示すアドレスを代入している

print('******************************************************************')

X = 20
Y = X
Y = 5
# id = 数字やリストなどオブジェクト自体の識別子
print(id(X))
print(id(Y))
print(Y)
print(X)

print('******************************************************************')

X = ['a', 'b']
Y = X
Y[0] = 'p'
# リストを代入すると、参照渡しでIDが代入される
print(id(X))
print(id(Y))
print(Y)
print(X)

print('******************************************************************')
