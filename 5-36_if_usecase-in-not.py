print('**********************************************************************')

y = [1, 2, 3]
x = 1

# 指定した変数が、任意のリストなどに入っているかを調べる -> inを使用
if x in y:
    print('in')

print('**********************************************************************')

y = [1, 2, 3]
x = 10

# 指定した変数が、任意のリストなどに入っていないことを調べる -> not inを使用
if x not in y:
    print('not in')

if 1000 not in y:
    print('not in')

print('**********************************************************************')

a = 1
b = 2

# 演算子とnotの組み合わせ
## ただしpythonでは数字の比較の際に、下記の書き方は推奨されていない
if not a == b:
    print('not equal')

# pythonでは、演算子で等しくないことを表現できる。<-こっちが推奨される
if not a != b:
    print('not equal')

# 推奨されていない理由は、下記のようなケースがあるから
# 「もしaがbよりも大きくない場合」という意味なり、冗長/わかりずらい
if not a > b:
    print('a is smaller')

# 比較演算子を使用すれば簡潔に不等式を表現できる
if a < b:
    print('a is smaller')


print('**********************************************************************')

# notの使い所
## boolen型を否定する際に使用される
is_ok = True

## pythonでは、Trueと定義されている変数(boolen型)を、if文でTrueか否かを判断する際に条件を指定しなくてもよい
print(type(is_ok))
if is_ok:
    print('hello')

### if文で条件あえて書くこともできるが冗長。変数を見れば、is_okがTrueであることは明らか
if is_ok == True:
    print('hello')

print('**********************************************************************')

#is_ok = True
is_ok = False
print(type(is_ok))

# boolen型を否定したい場合は、変数の前にnotを付けると
if not is_ok:
    print('hello')

## 演算子を使用しても同じ結果が得られるが冗長。あまり使われない
if is_ok != True:
    print('hello')

print('**********************************************************************')
