# [] ←ブラケットのカギかっこ
# () ←パレンティスの丸かっこ
print('******************************************************************')

t = (1, 2, 3, 4, 1, 2)
print(t)
print(t, type(t))

print('******************************************************************')

# tappleは値の代入ができない。しようとしてサポートされていないのでエラーが吐き出される

## t[0] = 100
## print(t)

# インデックスやスライス指定の出力は可能
print(t[0])
print(t[-1])
print(t[-1], type(t[-1]))
print(t[2:5])

print('******************************************************************')

# インデックスメソッド x.index(y) でtapple内の任意の数字(y)が、どのインデックスに位置するかを出力できる
## 複数重複する値がある場合は、先頭の値から判断される
print(t.index(1))
print(t.index(2))


## 特定のインデックスから探す場合。初めの数字が探したい任意の値。カンマの後ろが探し始めるインデックスの指定
print(t.index(1, 1))
print(t.index(2, 2))

print('******************************************************************')

# カウントメソッド x.countで任意の値がtapple内にいくつあるかをしらべられる
print(t.count(1))

print('******************************************************************')

# ヘルプメソッドでタプルとリストを比べると、help(list) help(tapple) でメソッドの数に違いがある。
# タプルはデータの操作には使わない。データを書き込んだ後に、値を変更してほしくないときに使用する。
## print(help(list))
## print(help(tuple))

print('******************************************************************')

# タプル内にリストを入れることはできる。

## 2:19 秒から開始
print('******************************************************************')
# nestでタプルの中にリストを入れ込む
t = ([1, 2, 3], [4, 5, 6])
print(t)

## tの0は[1, 2, 3]。変えようとするとエラーが出る
t[0] = [1]

# ただし、tの0のリストの中のインデックスを指定して値を変更することは可能
t[0][0] = 100
print(t)

print('******************************************************************')

# tupleの宣言方法パレンティスの丸括弧なくても可能
## カンマを付けた時点でtupleという扱いになる
t = 1, 2, 3
print(t, type(t))

t = 1,
print(t, type(t))

print('******************************************************************')

# 方の違いはバグに繋がりやすいので要注意
t = 1
print(t, type(t))

t = 1,
print(t, type(t))

# 中身がからの（）はタプルになる
t = ()
print(t , type(t))

# 中身が数字の（）はintになる
t = (1)
print(t , type(t))

# 中身が文字列の（）はstrになる
t = ('test')
print(t , type(t))

# 文字列をタプルにしたければカンマ「,」が必要
t = ('test')
print(t , type(t))

# よくある間違い。tがtupleで定義されているので、四則演算はできない。
# t = 1,
# t + 100

print('******************************************************************')

# 新しいタプルを宣言すれば、タプルを足すことはできる
new_tuple = (1, 2, 3) + (4, 5, 6)
print(new_tuple)

# intとtupleは足せない
## new_tuple = (1) + (4, 5, 6)
## print(new_tuple)

new_tuple = (1), + (4, 5, 6)
print(new_tuple)

print('******************************************************************')
